1. Alias 지정
  import numpy as np
  
2. ndarray 생성하기 
  arr = np.array([1, 2, 3, 4], dtype=int)
  arr.shape
  - shape 확인 가능 
  
 2.1 index로 설정하여 나누기
  arr[0] 
  - index로 지정하여 확인 , 배열을 필요한 부분만 가지고 와서 slicing이라고도 함
  arr[1:], arr[:4]
  - 범위를 지정해서 가지고 올 수도 있음
  
 2.2 fancy indexing
  fancy 인덱싱은 범위가 아닌 특정 index의 집합의 값을 선택하여 추출하고 싶을 때 활용
  반드시 [추출하고 싶은 인덱스] 꺾쇠 괄호로 묶음
  
  idx = [1, 3, 5]
  arr[idx]
  
3. range 생성
 3.1 arange를 사용해서 쉽게 생성하기
  첫번째 인자에는 start 이상, 두번째 인자에는 stop의 미만
  arr = np.arange(11, 1)
  
 3.2 keyword 인자를 사용해보기
  keyword 인자는 파라미터(인자)의 keyword를 지정해줌으로썬 순서 없이 지정
  arr = np.arange(start=1, stop=11)
  arr = np.arange(start=1, stop=11, step=2) -- step를 추가해서 홀수만 범위 지정 가능
      
  #헷갈리는 파이썬 range(cf.arange)
      for i in range(1, 11):
        print(i)
        
4. sort
  4.1 1차원 정렬
   np.sort(arr) -- 기본적인 오름차순 정렬
   np.sort(arr)[::-1] -- 내림차순 정렬
   
   값을 sort 된 상태로 저장하려면, 배열 자체에 sort
   arr2 = np.sort(arr)
   
  4.2 n차원 정렬
   arr2d = np.array([[5, 6, 7, 8], 
                  [4, 3, 2, 1],
                  [10, 9, 12, 11]])
   
   * 열정렬 - 왼쪽에서 오른쪽으로
     np.sort(arr2d, axis=1)
     
     
   * 행정렬 - 위에서 아래로
     np.sort(arr2d, axis=0)
     
  4.3 index를 반환하는 argsort
   정렬된 값을 반환하는 것이 아닌 index를 반환
   
   arr2d = np.array([[5, 6, 7, 8], 
                  [4, 3, 2, 1],
                  [10, 9, 12, 11]])
                  
                  
   * 열정렬 - 왼쪽에서 오른쪽으로
     np.argsort(arr2d, axis=1)
     
     array([[0, 1, 2, 3],
       [3, 2, 1, 0],
       [1, 0, 3, 2]])
     
   * 행정렬 - 위에서 아래로
     np.argsort(arr2d, axis=0)
     
     array([[1, 1, 1, 1],
       [0, 0, 0, 0],
       [2, 2, 2, 2]])
       
       
